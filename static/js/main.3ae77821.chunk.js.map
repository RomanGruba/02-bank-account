{"version":3,"sources":["Components/Utils/transactionType.jsx","Components/Controls/Controls.jsx","Components/Balance/Balance.jsx","Components/Dashboard.jsx","index.js"],"names":["transactionType","deposit","withdraw","Controls","transaction","addTransaction","handleSubmitTransaction","className","type","name","value","onChange","onClick","Balance","allDeposits","allWithdraws","balance","Dashboard","state","transactions","e","setState","target","notify","notice","toast","preventDefault","date","Date","options","year","month","timezone","hour","minute","second","newTransaction","id","shortid","generate","amount","toLocaleString","prevState","Number","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ae77821.chunk.js","sourcesContent":["const transactionType = {\n  deposit: 'Deposit',\n  withdraw: 'Withdraw',\n};\n\nexport default transactionType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport transactionType from '../Utils/transactionType';\n\nconst Controls = ({ transaction, addTransaction, handleSubmitTransaction }) => (\n  <section className=\"controls\">\n    <input\n      type=\"number\"\n      name=\"transaction\"\n      value={transaction}\n      onChange={addTransaction}\n    />\n    <button\n      type=\"button\"\n      onClick={handleSubmitTransaction}\n      name={transactionType.deposit}\n    >\n      Deposit\n    </button>\n    <button\n      type=\"button\"\n      onClick={handleSubmitTransaction}\n      name={transactionType.withdraw}\n    >\n      Withdraw\n    </button>\n  </section>\n);\n\nControls.propTypes = {\n  transaction: PropTypes.string.isRequired,\n  addTransaction: PropTypes.func.isRequired,\n  handleSubmitTransaction: PropTypes.func.isRequired,\n};\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Balance = ({ allDeposits, allWithdraws, balance }) => (\n  <section className=\"balance\">\n    <span>⬆️{allDeposits}$</span>\n    <span>⬇️{allWithdraws}$</span>\n    <span>Balance: {balance}$</span>\n  </section>\n);\n\nBalance.propTypes = {\n  allDeposits: PropTypes.number.isRequired,\n  allWithdraws: PropTypes.number.isRequired,\n  balance: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Controls from './Controls/Controls';\nimport Balance from './Balance/Balance';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default class Dashboard extends Component {\n  state = {\n    transactions: [],\n    transaction: '',\n    balance: 0,\n    allDeposits: 0,\n    allWithdraws: 0,\n  };\n\n  addTransaction = e => {\n    this.setState({\n      transaction: e.target.value,\n    });\n  };\n\n  notify = notice => toast(notice);\n\n  handleSubmitTransaction = e => {\n    e.preventDefault();\n    const date = new Date();\n\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      timezone: 'UTC',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n    };\n    if (e.target.name === 'Deposit' && this.state.transaction > 0) {\n      const newTransaction = {\n        id: shortid.generate(),\n        amount: this.state.transaction,\n        type: e.target.name,\n        date: date.toLocaleString('en', options),\n      };\n      this.setState(prevState => ({\n        transactions: [...prevState.transactions, newTransaction],\n        balance: prevState.balance + Number(newTransaction.amount),\n        allDeposits: prevState.allDeposits + Number(newTransaction.amount),\n        transaction: '',\n      }));\n    } else if (this.state.transaction === '0') {\n      this.notify('Введите сумму для проведения операции!');\n    }\n\n    if (\n      e.target.name === 'Withdraw' &&\n      this.state.balance >= this.state.transaction &&\n      this.state.transaction > 0\n    ) {\n      const newTransaction = {\n        id: shortid.generate(),\n        amount: this.state.transaction,\n        type: e.target.name,\n        date: date.toLocaleString('en', options),\n      };\n      this.setState(prevState => ({\n        transactions: [...prevState.transactions, newTransaction],\n        balance: prevState.balance - Number(newTransaction.amount),\n        allWithdraws: prevState.allWithdraws + Number(newTransaction.amount),\n        transaction: '',\n      }));\n    } else if (\n      e.target.name === 'Withdraw' &&\n      this.state.balance <= this.state.transaction\n    ) {\n      this.notify('На счету недостаточно средств для проведения операции!');\n    }\n  };\n\n  render() {\n    const { transaction, allDeposits, allWithdraws, balance } = this.state;\n    return (\n      <div className=\"dashboard\">\n        <Controls\n          transaction={transaction}\n          addTransaction={this.addTransaction}\n          handleSubmitTransaction={this.handleSubmitTransaction}\n        />\n        <Balance\n          allDeposits={allDeposits}\n          allWithdraws={allWithdraws}\n          balance={balance}\n        />\n\n        <ToastContainer />\n\n        <table className=\"history\">\n          <thead>\n            <tr>\n              <th>Transaction</th>\n              <th>Amount</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.transactions.map(transaction => (\n              <tr key={transaction.id}>\n                <td>{transaction.type}</td>\n                <td>{transaction.amount}$</td>\n                <td>{transaction.date}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './Components/Dashboard';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'));\n"],"sourceRoot":""}